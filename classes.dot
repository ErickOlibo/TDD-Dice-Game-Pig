digraph "classes" {
rankdir=BT
charset="utf-8"
"DiceGame.brain.Brain" [color="black", fontcolor="black", label=<{Brain|<br ALIGN="LEFT"/>|action(score: int, turn_points: int): Turn<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.helpers.Data_Path" [color="black", fontcolor="black", label=<{Data_Path|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.database.Database" [color="black", fontcolor="black", label=<{Database|highscore<br ALIGN="LEFT"/>|add_winner(winner: Winner)<br ALIGN="LEFT"/>load_game(code: str): Game<br ALIGN="LEFT"/>store_game(game: Game): str<br ALIGN="LEFT"/>update_winner_name(old: str, new: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.dice.Dice" [color="black", fontcolor="black", label=<{Dice|mode<br ALIGN="LEFT"/>|roll(): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"enum.Enum" [color="black", fontcolor="black", label=<{Enum|<br ALIGN="LEFT"/>|name()<br ALIGN="LEFT"/>value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.gui.GUI" [color="black", fontcolor="black", label=<{GUI|<br ALIGN="LEFT"/>|clear_terminal()<br ALIGN="LEFT"/>cpu_question_answer_animation(msg1: str, msg2: str)<br ALIGN="LEFT"/>display_hand_results(numbers: list, points: int)<br ALIGN="LEFT"/>display_hand_results_split(numbers: list, points: int, split)<br ALIGN="LEFT"/>display_highscore(scores: list, size: int)<br ALIGN="LEFT"/>display_info(text: str, title: str, width)<br ALIGN="LEFT"/>display_message_and_continues(msg: str)<br ALIGN="LEFT"/>display_paused_game_message(code: str): str<br ALIGN="LEFT"/>display_scoreboard(n1: str, s1: int, n2: str, s2: int, hand: str)<br ALIGN="LEFT"/>get_simple_answer_from_cpu(ask: str, title: str, width): str<br ALIGN="LEFT"/>get_simple_answer_from_user(ask: str, title: str, width): str<br ALIGN="LEFT"/>get_text_to_shown_menu(title: str, question: str, options: list, legend): str<br ALIGN="LEFT"/>insert_line_breaks(numb)<br ALIGN="LEFT"/>print_to_display(msg: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.game.Game" [color="black", fontcolor="black", label=<{Game|T<br ALIGN="LEFT"/>codename<br ALIGN="LEFT"/>mode<br ALIGN="LEFT"/>mode<br ALIGN="LEFT"/>|display_rules()<br ALIGN="LEFT"/>game_for_test(p1: Player, p2: Player, mode: Mode)<br ALIGN="LEFT"/>menu_transition()<br ALIGN="LEFT"/>play(codename)<br ALIGN="LEFT"/>request_codename_from_user()<br ALIGN="LEFT"/>set_player_one()<br ALIGN="LEFT"/>set_player_two()<br ALIGN="LEFT"/>set_solo_player(mode: Mode)<br ALIGN="LEFT"/>show_highscore(scores, size)<br ALIGN="LEFT"/>show_menu(title: str, type: T): T<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.helpers.Mode" [color="black", fontcolor="black", label=<{Mode|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.player.Player" [color="black", fontcolor="black", label=<{Player|brain<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>rolls<br ALIGN="LEFT"/>score<br ALIGN="LEFT"/>|add_points_to_score(points: int)<br ALIGN="LEFT"/>playing_choice(score, turn_points): Turn<br ALIGN="LEFT"/>reset_rolls()<br ALIGN="LEFT"/>roll_dice(): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.helpers.Settings" [color="black", fontcolor="black", label=<{Settings|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.helpers.Start_Up" [color="black", fontcolor="black", label=<{Start_Up|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T" [color="black", fontcolor="black", label=<{T|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.helpers.Tactic" [color="black", fontcolor="black", label=<{Tactic|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.test_brain.TestBrain" [color="black", fontcolor="black", label=<{TestBrain|brain<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_action()<br ALIGN="LEFT"/>test_brain()<br ALIGN="LEFT"/>test_random_strategy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"unittest.case.TestCase" [color="black", fontcolor="black", label=<{TestCase|assertAlmostEquals<br ALIGN="LEFT"/>assertEquals<br ALIGN="LEFT"/>assertNotAlmostEquals<br ALIGN="LEFT"/>assertNotEquals<br ALIGN="LEFT"/>assertNotRegexpMatches<br ALIGN="LEFT"/>assertRaisesRegexp<br ALIGN="LEFT"/>assertRegexpMatches<br ALIGN="LEFT"/>assert_<br ALIGN="LEFT"/>failIf<br ALIGN="LEFT"/>failIfAlmostEqual<br ALIGN="LEFT"/>failIfEqual<br ALIGN="LEFT"/>failUnless<br ALIGN="LEFT"/>failUnlessAlmostEqual<br ALIGN="LEFT"/>failUnlessEqual<br ALIGN="LEFT"/>failUnlessRaises<br ALIGN="LEFT"/>failureException : AssertionError<br ALIGN="LEFT"/>longMessage : bool<br ALIGN="LEFT"/>maxDiff : int<br ALIGN="LEFT"/>|addClassCleanup()<br ALIGN="LEFT"/>addCleanup()<br ALIGN="LEFT"/>addTypeEqualityFunc(typeobj, function)<br ALIGN="LEFT"/>assertAlmostEqual(first, second, places, msg, delta)<br ALIGN="LEFT"/>assertCountEqual(first, second, msg)<br ALIGN="LEFT"/>assertDictContainsSubset(subset, dictionary, msg)<br ALIGN="LEFT"/>assertDictEqual(d1, d2, msg)<br ALIGN="LEFT"/>assertEqual(first, second, msg)<br ALIGN="LEFT"/>assertFalse(expr, msg)<br ALIGN="LEFT"/>assertGreater(a, b, msg)<br ALIGN="LEFT"/>assertGreaterEqual(a, b, msg)<br ALIGN="LEFT"/>assertIn(member, container, msg)<br ALIGN="LEFT"/>assertIs(expr1, expr2, msg)<br ALIGN="LEFT"/>assertIsInstance(obj, cls, msg)<br ALIGN="LEFT"/>assertIsNone(obj, msg)<br ALIGN="LEFT"/>assertIsNot(expr1, expr2, msg)<br ALIGN="LEFT"/>assertIsNotNone(obj, msg)<br ALIGN="LEFT"/>assertLess(a, b, msg)<br ALIGN="LEFT"/>assertLessEqual(a, b, msg)<br ALIGN="LEFT"/>assertListEqual(list1, list2, msg)<br ALIGN="LEFT"/>assertLogs(logger, level)<br ALIGN="LEFT"/>assertMultiLineEqual(first, second, msg)<br ALIGN="LEFT"/>assertNotAlmostEqual(first, second, places, msg, delta)<br ALIGN="LEFT"/>assertNotEqual(first, second, msg)<br ALIGN="LEFT"/>assertNotIn(member, container, msg)<br ALIGN="LEFT"/>assertNotIsInstance(obj, cls, msg)<br ALIGN="LEFT"/>assertNotRegex(text, unexpected_regex, msg)<br ALIGN="LEFT"/>assertRaises(expected_exception)<br ALIGN="LEFT"/>assertRaisesRegex(expected_exception, expected_regex)<br ALIGN="LEFT"/>assertRegex(text, expected_regex, msg)<br ALIGN="LEFT"/>assertSequenceEqual(seq1, seq2, msg, seq_type)<br ALIGN="LEFT"/>assertSetEqual(set1, set2, msg)<br ALIGN="LEFT"/>assertTrue(expr, msg)<br ALIGN="LEFT"/>assertTupleEqual(tuple1, tuple2, msg)<br ALIGN="LEFT"/>assertWarns(expected_warning)<br ALIGN="LEFT"/>assertWarnsRegex(expected_warning, expected_regex)<br ALIGN="LEFT"/>countTestCases()<br ALIGN="LEFT"/>debug()<br ALIGN="LEFT"/>defaultTestResult()<br ALIGN="LEFT"/>doClassCleanups()<br ALIGN="LEFT"/>doCleanups()<br ALIGN="LEFT"/>fail(msg)<br ALIGN="LEFT"/>id()<br ALIGN="LEFT"/>run(result)<br ALIGN="LEFT"/><I>setUp</I>()<br ALIGN="LEFT"/><I>setUpClass</I>()<br ALIGN="LEFT"/>shortDescription()<br ALIGN="LEFT"/>skipTest(reason)<br ALIGN="LEFT"/>subTest(msg)<br ALIGN="LEFT"/><I>tearDown</I>()<br ALIGN="LEFT"/><I>tearDownClass</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.test_database.TestDatabase" [color="black", fontcolor="black", label=<{TestDatabase|db<br ALIGN="LEFT"/>game1<br ALIGN="LEFT"/>game2<br ALIGN="LEFT"/>game3<br ALIGN="LEFT"/>games : list<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_winner()<br ALIGN="LEFT"/>test_database()<br ALIGN="LEFT"/>test_load_game()<br ALIGN="LEFT"/>test_store_game()<br ALIGN="LEFT"/>test_update_winner_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.test_dice.TestDice" [color="black", fontcolor="black", label=<{TestDice|dice<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test__items()<br ALIGN="LEFT"/>test_dice()<br ALIGN="LEFT"/>test_mode()<br ALIGN="LEFT"/>test_roll()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.test_gui.TestGUI" [color="black", fontcolor="black", label=<{TestGUI|gui<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test__shrink_name()<br ALIGN="LEFT"/>test_display_message_and_continues(input)<br ALIGN="LEFT"/>test_display_paused_game_message(input)<br ALIGN="LEFT"/>test_get_answer_from_user(input)<br ALIGN="LEFT"/>test_gui_display()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.test_game.TestGame" [color="black", fontcolor="black", label=<{TestGame|db<br ALIGN="LEFT"/>game<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test__resp_is_turn_settings()<br ALIGN="LEFT"/>test_game()<br ALIGN="LEFT"/>test_game_for_test()<br ALIGN="LEFT"/>test_hold_roll_win(input)<br ALIGN="LEFT"/>test_messages()<br ALIGN="LEFT"/>test_mode()<br ALIGN="LEFT"/>test_play_new_game(input)<br ALIGN="LEFT"/>test_play_with_codename(input)<br ALIGN="LEFT"/>test_playing_a_turn_1()<br ALIGN="LEFT"/>test_playing_a_turn_2(input)<br ALIGN="LEFT"/>test_request_codename_from_user(input)<br ALIGN="LEFT"/>test_resolve_Show_settings_menu(input)<br ALIGN="LEFT"/>test_resp_is_turn_choose_hold(input)<br ALIGN="LEFT"/>test_resp_is_turn_hold_for_win(input)<br ALIGN="LEFT"/>test_set_player_one(input)<br ALIGN="LEFT"/>test_set_player_two(input)<br ALIGN="LEFT"/>test_set_solo_player(input)<br ALIGN="LEFT"/>test_set_solo_player_offload()<br ALIGN="LEFT"/>test_show_menu(input)<br ALIGN="LEFT"/>test_show_menu_offload()<br ALIGN="LEFT"/>test_show_menu_raise(input)<br ALIGN="LEFT"/>test_start_of_trun_scoreboard()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.test_player.TestPlayer" [color="black", fontcolor="black", label=<{TestPlayer|jen<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_points_to_score()<br ALIGN="LEFT"/>test_brain()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_player()<br ALIGN="LEFT"/>test_playing_choice()<br ALIGN="LEFT"/>test_roll_dice()<br ALIGN="LEFT"/>test_score()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.test_winner.TestWinner" [color="black", fontcolor="black", label=<{TestWinner|winner1<br ALIGN="LEFT"/>winner2<br ALIGN="LEFT"/>winner3<br ALIGN="LEFT"/>winner4<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_data()<br ALIGN="LEFT"/>test_to_string()<br ALIGN="LEFT"/>test_winner()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.helpers.Textual" [color="black", fontcolor="black", label=<{Textual|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.helpers.Turn" [color="black", fontcolor="black", label=<{Turn|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DiceGame.winner.Winner" [color="black", fontcolor="black", label=<{Winner|data<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>to_string<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"unittest.case._Outcome" [color="black", fontcolor="black", label=<{_Outcome|errors : list<br ALIGN="LEFT"/>expectedFailure : NoneType<br ALIGN="LEFT"/>expecting_failure : bool<br ALIGN="LEFT"/>result : NoneType<br ALIGN="LEFT"/>result_supports_subtests : bool<br ALIGN="LEFT"/>skipped : list<br ALIGN="LEFT"/>success : bool<br ALIGN="LEFT"/>|testPartExecutor(test_case, isTest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"unittest.case._SubTest" [color="black", fontcolor="black", label=<{_SubTest|failureException<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>test_case<br ALIGN="LEFT"/>|id()<br ALIGN="LEFT"/><I>runTest</I>()<br ALIGN="LEFT"/>shortDescription()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DiceGame.helpers.Data_Path" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.helpers.Mode" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.helpers.Settings" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.helpers.Start_Up" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.helpers.Tactic" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.helpers.Textual" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.helpers.Turn" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_brain.TestBrain" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_database.TestDatabase" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_dice.TestDice" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_game.TestGame" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_gui.TestGUI" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_player.TestPlayer" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"DiceGame.test_winner.TestWinner" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
"unittest.case._SubTest" -> "unittest.case.TestCase" [arrowhead="empty", arrowtail="none"];
".T" -> "DiceGame.game.Game" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
"unittest.case._SubTest" -> "unittest.case.TestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_subtest", style="solid"];
"unittest.case._Outcome" -> "unittest.case.TestCase" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_outcome", style="solid"];
"unittest.case._SubTest" -> "unittest.case.TestCase" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_subtest", style="solid"];
}
